// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client_To_Server_Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_5fTo_5fServer_5fPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_5fTo_5fServer_5fPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_5fTo_5fServer_5fPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_5fTo_5fServer_5fPacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_5fTo_5fServer_5fPacket_2eproto;
namespace Client_To_Server {
class LoginAck;
class LoginAckDefaultTypeInternal;
extern LoginAckDefaultTypeInternal _LoginAck_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
}  // namespace Client_To_Server
PROTOBUF_NAMESPACE_OPEN
template<> ::Client_To_Server::LoginAck* Arena::CreateMaybeMessage<::Client_To_Server::LoginAck>(Arena*);
template<> ::Client_To_Server::LoginRequest* Arena::CreateMaybeMessage<::Client_To_Server::LoginRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Client_To_Server {

enum ProcotolType : int {
  LOGIN_REQUEST = 0,
  LOGIN_ACK = 1,
  ProcotolType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcotolType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcotolType_IsValid(int value);
constexpr ProcotolType ProcotolType_MIN = LOGIN_REQUEST;
constexpr ProcotolType ProcotolType_MAX = LOGIN_ACK;
constexpr int ProcotolType_ARRAYSIZE = ProcotolType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcotolType_descriptor();
template<typename T>
inline const std::string& ProcotolType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcotolType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcotolType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcotolType_descriptor(), enum_t_value);
}
inline bool ProcotolType_Parse(
    const std::string& name, ProcotolType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcotolType>(
    ProcotolType_descriptor(), name, value);
}
// ===================================================================

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client_To_Server.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client_To_Server.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_5fTo_5fServer_5fPacket_2eproto);
    return ::descriptor_table_Client_5fTo_5fServer_5fPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 2,
    kAuthStringFieldNumber = 3,
    kProtocolFieldNumber = 1,
  };
  // string UserID = 2;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string AuthString = 3;
  void clear_authstring();
  const std::string& authstring() const;
  void set_authstring(const std::string& value);
  void set_authstring(std::string&& value);
  void set_authstring(const char* value);
  void set_authstring(const char* value, size_t size);
  std::string* mutable_authstring();
  std::string* release_authstring();
  void set_allocated_authstring(std::string* authstring);
  private:
  const std::string& _internal_authstring() const;
  void _internal_set_authstring(const std::string& value);
  std::string* _internal_mutable_authstring();
  public:

  // .Client_To_Server.ProcotolType Protocol = 1;
  void clear_protocol();
  ::Client_To_Server::ProcotolType protocol() const;
  void set_protocol(::Client_To_Server::ProcotolType value);
  private:
  ::Client_To_Server::ProcotolType _internal_protocol() const;
  void _internal_set_protocol(::Client_To_Server::ProcotolType value);
  public:

  // @@protoc_insertion_point(class_scope:Client_To_Server.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authstring_;
  int protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_5fTo_5fServer_5fPacket_2eproto;
};
// -------------------------------------------------------------------

class LoginAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Client_To_Server.LoginAck) */ {
 public:
  LoginAck();
  virtual ~LoginAck();

  LoginAck(const LoginAck& from);
  LoginAck(LoginAck&& from) noexcept
    : LoginAck() {
    *this = ::std::move(from);
  }

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAck& operator=(LoginAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginAck* internal_default_instance() {
    return reinterpret_cast<const LoginAck*>(
               &_LoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginAck& a, LoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginAck* New() const final {
    return CreateMaybeMessage<LoginAck>(nullptr);
  }

  LoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginAck& from);
  void MergeFrom(const LoginAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Client_To_Server.LoginAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_5fTo_5fServer_5fPacket_2eproto);
    return ::descriptor_table_Client_5fTo_5fServer_5fPacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 4,
    kProtocolFieldNumber = 1,
    kResultFieldNumber = 2,
    kUserKeyFieldNumber = 3,
  };
  // string UserID = 4;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .Client_To_Server.ProcotolType Protocol = 1;
  void clear_protocol();
  ::Client_To_Server::ProcotolType protocol() const;
  void set_protocol(::Client_To_Server::ProcotolType value);
  private:
  ::Client_To_Server::ProcotolType _internal_protocol() const;
  void _internal_set_protocol(::Client_To_Server::ProcotolType value);
  public:

  // uint32 Result = 2;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 UserKey = 3;
  void clear_userkey();
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey() const;
  void set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userkey() const;
  void _internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Client_To_Server.LoginAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  int protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_5fTo_5fServer_5fPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// .Client_To_Server.ProcotolType Protocol = 1;
inline void LoginRequest::clear_protocol() {
  protocol_ = 0;
}
inline ::Client_To_Server::ProcotolType LoginRequest::_internal_protocol() const {
  return static_cast< ::Client_To_Server::ProcotolType >(protocol_);
}
inline ::Client_To_Server::ProcotolType LoginRequest::protocol() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginRequest.Protocol)
  return _internal_protocol();
}
inline void LoginRequest::_internal_set_protocol(::Client_To_Server::ProcotolType value) {
  
  protocol_ = value;
}
inline void LoginRequest::set_protocol(::Client_To_Server::ProcotolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginRequest.Protocol)
}

// string UserID = 2;
inline void LoginRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::userid() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginRequest.UserID)
  return _internal_userid();
}
inline void LoginRequest::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginRequest.UserID)
}
inline std::string* LoginRequest::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:Client_To_Server.LoginRequest.UserID)
  return _internal_mutable_userid();
}
inline const std::string& LoginRequest::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void LoginRequest::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client_To_Server.LoginRequest.UserID)
}
inline void LoginRequest::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client_To_Server.LoginRequest.UserID)
}
inline void LoginRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client_To_Server.LoginRequest.UserID)
}
inline std::string* LoginRequest::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_userid() {
  // @@protoc_insertion_point(field_release:Client_To_Server.LoginRequest.UserID)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Client_To_Server.LoginRequest.UserID)
}

// string AuthString = 3;
inline void LoginRequest::clear_authstring() {
  authstring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::authstring() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginRequest.AuthString)
  return _internal_authstring();
}
inline void LoginRequest::set_authstring(const std::string& value) {
  _internal_set_authstring(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginRequest.AuthString)
}
inline std::string* LoginRequest::mutable_authstring() {
  // @@protoc_insertion_point(field_mutable:Client_To_Server.LoginRequest.AuthString)
  return _internal_mutable_authstring();
}
inline const std::string& LoginRequest::_internal_authstring() const {
  return authstring_.GetNoArena();
}
inline void LoginRequest::_internal_set_authstring(const std::string& value) {
  
  authstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_authstring(std::string&& value) {
  
  authstring_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client_To_Server.LoginRequest.AuthString)
}
inline void LoginRequest::set_authstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client_To_Server.LoginRequest.AuthString)
}
inline void LoginRequest::set_authstring(const char* value, size_t size) {
  
  authstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client_To_Server.LoginRequest.AuthString)
}
inline std::string* LoginRequest::_internal_mutable_authstring() {
  
  return authstring_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_authstring() {
  // @@protoc_insertion_point(field_release:Client_To_Server.LoginRequest.AuthString)
  
  return authstring_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_authstring(std::string* authstring) {
  if (authstring != nullptr) {
    
  } else {
    
  }
  authstring_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authstring);
  // @@protoc_insertion_point(field_set_allocated:Client_To_Server.LoginRequest.AuthString)
}

// -------------------------------------------------------------------

// LoginAck

// .Client_To_Server.ProcotolType Protocol = 1;
inline void LoginAck::clear_protocol() {
  protocol_ = 0;
}
inline ::Client_To_Server::ProcotolType LoginAck::_internal_protocol() const {
  return static_cast< ::Client_To_Server::ProcotolType >(protocol_);
}
inline ::Client_To_Server::ProcotolType LoginAck::protocol() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginAck.Protocol)
  return _internal_protocol();
}
inline void LoginAck::_internal_set_protocol(::Client_To_Server::ProcotolType value) {
  
  protocol_ = value;
}
inline void LoginAck::set_protocol(::Client_To_Server::ProcotolType value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginAck.Protocol)
}

// uint32 Result = 2;
inline void LoginAck::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginAck::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginAck::result() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginAck.Result)
  return _internal_result();
}
inline void LoginAck::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void LoginAck::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginAck.Result)
}

// uint64 UserKey = 3;
inline void LoginAck::clear_userkey() {
  userkey_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginAck::_internal_userkey() const {
  return userkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LoginAck::userkey() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginAck.UserKey)
  return _internal_userkey();
}
inline void LoginAck::_internal_set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userkey_ = value;
}
inline void LoginAck::set_userkey(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userkey(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginAck.UserKey)
}

// string UserID = 4;
inline void LoginAck::clear_userid() {
  userid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginAck::userid() const {
  // @@protoc_insertion_point(field_get:Client_To_Server.LoginAck.UserID)
  return _internal_userid();
}
inline void LoginAck::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Client_To_Server.LoginAck.UserID)
}
inline std::string* LoginAck::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:Client_To_Server.LoginAck.UserID)
  return _internal_mutable_userid();
}
inline const std::string& LoginAck::_internal_userid() const {
  return userid_.GetNoArena();
}
inline void LoginAck::_internal_set_userid(const std::string& value) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginAck::set_userid(std::string&& value) {
  
  userid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client_To_Server.LoginAck.UserID)
}
inline void LoginAck::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client_To_Server.LoginAck.UserID)
}
inline void LoginAck::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client_To_Server.LoginAck.UserID)
}
inline std::string* LoginAck::_internal_mutable_userid() {
  
  return userid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginAck::release_userid() {
  // @@protoc_insertion_point(field_release:Client_To_Server.LoginAck.UserID)
  
  return userid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAck::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Client_To_Server.LoginAck.UserID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client_To_Server

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Client_To_Server::ProcotolType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client_To_Server::ProcotolType>() {
  return ::Client_To_Server::ProcotolType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_5fTo_5fServer_5fPacket_2eproto
